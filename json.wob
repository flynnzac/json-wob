set /json
    [ registry
        /json-syntax [ list "{" "}" "[" "]" "," ":" . ]
        /whitespace [ list " " "\t" "\n" . ] 
        /numbers [ list "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "." "-" . ] 
        /is-syntax
        < (
          collapse or [ do < ( string-eq t str . ) /t > json:/json-syntax . ] .
        ) /str >

        /is-whitespace
        < (
          collapse or [ do < ( string-eq t str . ) /t > json:/whitespace . ] .
        ) /str >

        /is-number-str
        < (
          collapse or [ do < ( string-eq t str . ) /t > json:/numbers . ] .
        ) /str >


        /lex-string
        < (

          set /start
              [
                if [ char-eq string i "'" . ]
                   { add i 1 . }
                   Nothing .
              ] .

          set /end
              [
                if [ is-nothing start . ]
                   Nothing 
                   {
                     set /x start .
                     set /escape False .
                     set /len [ string-length string . ] .
                     while ( and
                               { lt-eq x len . }
                               { or { not
                                        [ char-eq string x "'" . ] . }
                                    escape . } . )
                           (
                             if escape { set /escape False . } .
                             if [ char-eq string x "\\" . ]
                                {
                                  set /escape True .
                                } .
                             
                             incr x .
                           ) .
                     sub x 1 . 
                   } .
              ] .
          registry /start start /end end /type "string" . 
        ) /string /i >

        /lex-number
        < (
          set /start
              [
                if [ json:/is-number-str [ substring string i i . ] . ]
                   { answer i . }
                   Nothing .
              ] .

          set /end
              [
                if [ is-nothing start . ]
                   Nothing
                   {
                     set /x start .
                     while ( and
                               { lt-eq x [ string-length string . ] . }
                               { json:/is-number-str [ substring string x x . ] . } . )
                           ( incr x . ) .
                     
                     answer [ sub x 1 . ] .
                   } .
              ] .

          registry /start start /end end /type "number" .
        ) /string /i >

        /lex-bool
        < (
          if [ and { gt-eq [ string-length string . ] [ add i 3 . ] . }
                   { string-eq [ substring string i [ add i 3 . ] . ] "true" . } . ]
             {
               registry /start i /end [ add i 3 . ] /type "bool" .
             }
             {
               if [ and { gt-eq [ string-length string . ] [ add i 4 . ] . }
                        { string-eq [ substring string i [ add i 4 . ] . ] "false" . } . ]
                  {
                    registry /start i /end [ add i 4 . ] /type "bool" .
                  }
                  {
                    registry /start Nothing /end Nothing /type "bool" .
                  } .
             } .
        ) /string /i >

        /lex-null
        < (
          if [ and { gt-eq [ string-length string . ] [ add i 3 . ] . }
                   { string-eq [ substring string i [ add i 3 . ] . ] "null" . } . ]
             {
               registry /start i /end [ add i 3 . ] /type "null" .
             }
             {
               registry /start Nothing /end Nothing /type "null" .
             } .
        ) /string /i > 
        
        
        /lex
        < (
          
          set /tokens [ registry . ] .

          set /tokpos /t1 .
          set /end 1 .
          set /lex-tests [
                list
                  json:/lex-string
                  json:/lex-number
                  json:/lex-bool
                  json:/lex-null .
              ] .

          set /length [ string-length string . ] .
          while ( lt-eq end length . )
                (
                  set /loc /t1 .
                  set /res [ lex-tests:/t1 string end . ] .
                  while ( and [ is-nothing res:/start . ]
                              { exist [ next loc . ] lex-tests . } .
                        )
                        (
                          set /loc [ next loc . ] .
                          set /res [ lex-tests:loc string end . ] .
                        ) .

                  if [ is-nothing res:/start . ]
                     {
                       set /char [ substring string end end . ] .
                       if [ json:/is-syntax char . ]
                          {
                            set tokpos char tokens .
                            set /tokpos [ next tokpos . ] .
                            incr end .
                          }
                          {
                            if [ json:/is-whitespace char . ]
                               {
                                 incr end .
                               } .
                          } .
                     }
                     {
                       set /input [ substring string
                                              res:/start
                                              res:/end . ] .

                       set tokpos input tokens .
                       set /tokpos [ next tokpos . ] .
                       if [ string-eq res:/type "string" . ]
                          {
                            set /end [ add res:/end 2 . ] .
                          }
                          {
                            set /end [ add res:/end 1 . ] .
                          } .
                     } .
                ) .
          answer tokens .

        ) /string > 

        /parse-array
        (
          set /array [ registry . ] .
          set /tokpos [ next tokpos . ] .
          set /array-pos /t1 .
          
          while ( not [ string-eq tokens:tokpos "]" . ] . )
                (
                  set /res [ json:/parse /tokens tokens /tokpos tokpos . ] .
                  set /tokpos [ next res:/tokpos . ] .
                  if [ string-eq tokens:tokpos "," . ]
                     {
                       set /tokpos [ next tokpos . ] .
                     } .
                  
                  set array-pos res:/data array .
                  set /array-pos [ next array-pos . ] .
                ) .

          registry /tokpos tokpos /tokens tokens /data array .
        )

        /parse-hash
        (
          set /hash [ registry . ] .
          set /tokpos [ next tokpos . ] .

          while ( not [ string-eq tokens:tokpos "}" . ] . )
                (
                  set /key [ to-register tokens:tokpos . ] .
                  set /tokpos [ next tokpos . ] .
                  set /tokpos [ next tokpos . ] .
                  set /res [ json:/parse /tokens tokens /tokpos tokpos . ] .
                  set /tokpos [ next res:/tokpos . ] .
                  if [ string-eq tokens:tokpos "," . ]
                     {
                       set /tokpos [ next tokpos . ] .
                     } .
                  set key res:/data hash .
                ) .

          registry /tokpos tokpos /tokens tokens /data hash .

        )

        /parse
        (
          if [ string-eq tokens:tokpos "{" . ]
             {
               json:/parse-hash /tokens tokens /tokpos tokpos .
             }
             {
               if [ string-eq tokens:tokpos "[" . ]
                  {
                    json:/parse-array /tokens tokens /tokpos tokpos .
                  }
                  {

                    registry /tokpos tokpos /tokens tokens /data tokens:tokpos .
                  } .
             } .
        ) 

        /read
        < (
          set /tokens [ json:/lex str . ] .
          json:/parse /tokens tokens /tokpos /t1 .
          answer ans:/data .
        ) /str > .
      
    ] .

